Динамические структуры данных

Простейшая структорой данных является массив 
Массив -это набор перемееных в непрырывной области памяти
Приемуществом массива является быстрый доступ к элементам которой осуществляется за констатное время,по скольку сводится к оперции сложения а операция сложения всегда осуществляется за константное время 
Недостатка массива является сложноссть добавление,удаление массива,которая приводит к доролнительным затратам памяти и процесоороного времени  и зависит от размера массива
Неприрывная область памяти как раз обусловливает приемущество и не достатки массива
Недостатки массиво устраняют списки

Список(лист)-это множество элементов впроизвольной областях памяти,в каждой из которой содержит адресс следующего элемента
То что элементы списка находятся в произвольной боластях памяти,позволяют добавлять и удалять эти элементы без переопределение памяти 
Главным приемущество списка перед массива является быстрое добавление удаление и удаление элементов,которая остуществляется за констатное время и не зависит от размера
Потому что элемент не сравинительно можно можно распределить гд есть свободная память и для этого нам не нужно перреопределять весь список ,но главынм недостатком спискка является медленным доступ,который уже завист от размера списка
В отличии от массива,который дает произвольный доступ к элементам,список обеспечивает последовательный доступ к элементам и чтобы получить доступ к элементу нужно пройти через все элементы списка от его начала
Улюбого списка есть голова,у которого хранит адресс начального элемента списка,последний элемент списка всегда указывает на ноль
Реализация односвязного списка 
Односвязный список реализуется при помощи двух классов 
Класс элемент,описывает структуру элементов ,любой 
Data-значение элемента
pNext содержит одресс следующего элемента

LIST,Который отвечает объедение элементов в список,добавление,удаление элементов и тд

initializer_list-это контейнер 
Контейнер это объект,коорый организует храненин других объектов в памяти 
Как и любого друго контейнера по initializer_list есть методы begin () и end()
Begin()-возвращает итератор на начало контейнера
end()-Возвращает итератор на конец контейнера
cout<<typeID(il.Begon().name()<<endl;

